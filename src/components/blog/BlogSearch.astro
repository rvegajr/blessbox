---
import { getCollection } from "astro:content";

const posts = await Promise.all(
  (await getCollection("posts")).map(async (post) => ({
    title: post.data.title,
    description: post.data.description,
    slug: post.slug,
    content: post.body,
  }))
);
---

<div class="relative">
  <button
    type="button"
    id="searchButton"
    class="p-2 text-base-600 hover:text-base-900 focus:outline-none cursor-pointer"
    aria-label="Search posts"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
  </button>

  <div
    id="searchModal"
    class="fixed inset-0 z-50 overflow-y-auto hidden"
    role="dialog"
    aria-modal="true"
  >
    <div class="min-h-screen px-4 text-center">
      <div
        class="fixed inset-0 bg-base-500 bg-opacity-75 transition-opacity"
        id="modalOverlay"
      >
      </div>

      <div
        class="inline-block w-full max-w-2xl p-6 my-8 text-left align-middle transition-all transform bg-white shadow-xl rounded-lg"
      >
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-medium text-base-900">Search Posts</h3>
          <button
            type="button"
            id="closeSearch"
            class="text-base-400 hover:text-base-500 cursor-pointer"
            aria-label="Close search"
          >
            <svg
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <input
          type="text"
          id="searchInput"
          placeholder="Search posts..."
          class="w-full px-4 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />

        <div id="searchResults" class="mt-4 max-h-96 overflow-y-auto"></div>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ posts }}>
  window.addEventListener("load", () => {
    const searchButton = document.getElementById("searchButton");
    const searchModal = document.getElementById("searchModal");
    const modalOverlay = document.getElementById("modalOverlay");
    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");
    const closeSearch = document.getElementById("closeSearch");

    const fuse = new Fuse(posts, {
      keys: ["title", "description", "content"],
      threshold: 0.3,
      includeMatches: true,
    });

    function openSearch(e) {
      e.preventDefault();
      e.stopPropagation();
      searchModal.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      setTimeout(() => searchInput.focus(), 100);
    }

    function closeSearchModal(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      searchModal.classList.add("hidden");
      document.body.style.overflow = "";
      searchInput.value = "";
      searchResults.innerHTML = "";
    }

    function renderResults(results) {
      if (!searchInput.value.trim()) {
        searchResults.innerHTML = "";
        return;
      }

      if (results.length === 0) {
        searchResults.innerHTML = `
          <div class="px-4 py-3 text-sm text-base-500">
            No results found
          </div>
        `;
        return;
      }

      searchResults.innerHTML = results
        .slice(0, 5)
        .map(
          (result) => `
          <a 
            href="/blog/posts/${result.item.slug}"
            class="block px-4 py-3 hover:bg-base-100 rounded-md"
          >
            <div class="font-medium text-base-900">${result.item.title}</div>
            <div class="text-sm text-base-500">${result.item.description}</div>
          </a>
        `
        )
        .join("");
    }

    // Add both click and touch events for search button
    searchButton.addEventListener("click", openSearch);
    searchButton.addEventListener("touchend", openSearch);

    // Add both click and touch events for close button
    closeSearch.addEventListener("click", closeSearchModal);
    closeSearch.addEventListener("touchend", closeSearchModal);

    // Close modal when clicking outside
    modalOverlay.addEventListener("click", closeSearchModal);
    modalOverlay.addEventListener("touchend", closeSearchModal);

    searchInput.addEventListener("input", (e) => {
      const value = e.target.value;
      const results = value.trim() ? fuse.search(value) : [];
      renderResults(results);
    });

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
        closeSearchModal();
      }
    });
  });
</script>
