---
/**
 * Registration Grid Component - The Heart of Our Dashboard! üíñ
 * 
 * This beautiful Astro component displays registrations in a gorgeous grid
 * with sorting, filtering, and pagination - all server-side rendered!
 * 
 * Following ISP principles and using REAL data from PostgreSQL!
 */

import { RegistrationService } from '../../implementations/dashboard/RegistrationService';
import type { RegistrationFilters, PaginationOptions } from '../../interfaces/dashboard/IRegistrationService';

// Get props and URL parameters for filtering and pagination
interface Props {
  organizationId: string;
}

const { organizationId } = Astro.props;
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const limit = parseInt(url.searchParams.get('limit') || '25');
const sortBy = url.searchParams.get('sortBy') || 'registeredAt';
const sortOrder = (url.searchParams.get('sortOrder') || 'desc') as 'asc' | 'desc';
const deliveryStatus = url.searchParams.get('deliveryStatus')?.split(',') as ('pending' | 'delivered' | 'failed')[] | undefined;
const qrCodeLabels = url.searchParams.get('qrCodeLabels')?.split(',');

// Build filters from URL parameters
const filters: RegistrationFilters = {};
if (deliveryStatus && deliveryStatus.length > 0) {
  filters.deliveryStatus = deliveryStatus;
}
if (qrCodeLabels && qrCodeLabels.length > 0) {
  filters.qrCodeLabels = qrCodeLabels;
}

// Build pagination options
const pagination: PaginationOptions = {
  page,
  limit,
  sortBy,
  sortOrder,
};

// Fetch data using our beautiful service! üöÄ
const registrationService = new RegistrationService();
let registrationData;
let error = null;

try {
  registrationData = await registrationService.getRegistrations(
    organizationId,
    filters,
    pagination
  );
} catch (err) {
  error = err instanceof Error ? err.message : 'Failed to load registrations';
  console.error('‚ùå Error loading registrations:', err);
}
---

<div class="registration-grid-container">
  <!-- Header with Stats -->
  <div class="grid-header bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-2xl font-bold text-gray-900">Registrations</h2>
        {registrationData && (
          <p class="text-sm text-gray-600 mt-1">
            Showing {registrationData.registrations.length} of {registrationData.totalCount} registrations
            {filters.deliveryStatus && ` ‚Ä¢ Filtered by: ${filters.deliveryStatus.join(', ')}`}
          </p>
        )}
      </div>
      
      <!-- Quick Stats -->
      {registrationData && (
        <div class="flex space-x-6">
          <div class="text-center">
            <div class="text-2xl font-bold text-teal-600">{registrationData.totalCount}</div>
            <div class="text-xs text-gray-500">Total</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">
              {registrationData.registrations.filter(r => r.deliveryStatus === 'delivered').length}
            </div>
            <div class="text-xs text-gray-500">Delivered</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-yellow-600">
              {registrationData.registrations.filter(r => r.deliveryStatus === 'pending').length}
            </div>
            <div class="text-xs text-gray-500">Pending</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-red-600">
              {registrationData.registrations.filter(r => r.deliveryStatus === 'failed').length}
            </div>
            <div class="text-xs text-gray-500">Failed</div>
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Error State -->
  {error && (
    <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Error Loading Registrations</h3>
          <p class="text-sm text-red-700 mt-1">{error}</p>
        </div>
      </div>
    </div>
  )}

  <!-- Registration Grid -->
  {registrationData && (
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
      <!-- Table Header -->
      <div class="bg-gray-50 px-6 py-3 border-b border-gray-200">
        <div class="grid grid-cols-12 gap-4 text-xs font-medium text-gray-500 uppercase tracking-wider">
          <div class="col-span-2">Name</div>
          <div class="col-span-2">Email</div>
          <div class="col-span-1">QR Code</div>
          <div class="col-span-2">Registered</div>
          <div class="col-span-2">Status</div>
          <div class="col-span-2">Delivered</div>
          <div class="col-span-1">Actions</div>
        </div>
      </div>

      <!-- Table Body -->
      <div class="divide-y divide-gray-200">
        {registrationData.registrations.map((registration) => {
          const data = registration.registrationData;
          const firstName = data.firstName || data.first_name || '';
          const lastName = data.lastName || data.last_name || '';
          const email = data.email || '';
          
          return (
            <div class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
              <div class="grid grid-cols-12 gap-4 items-center">
                <!-- Name -->
                <div class="col-span-2">
                  <div class="text-sm font-medium text-gray-900">
                    {firstName} {lastName}
                  </div>
                  {registration.ipAddress && (
                    <div class="text-xs text-gray-500">IP: {registration.ipAddress}</div>
                  )}
                </div>

                <!-- Email -->
                <div class="col-span-2">
                  <div class="text-sm text-gray-900">{email}</div>
                </div>

                <!-- QR Code -->
                <div class="col-span-1">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {registration.qrCodeId}
                  </span>
                </div>

                <!-- Registered Date -->
                <div class="col-span-2">
                  <div class="text-sm text-gray-900">
                    {new Date(registration.registeredAt).toLocaleDateString()}
                  </div>
                  <div class="text-xs text-gray-500">
                    {new Date(registration.registeredAt).toLocaleTimeString()}
                  </div>
                </div>

                <!-- Status -->
                <div class="col-span-2">
                  {registration.deliveryStatus === 'delivered' && (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      ‚úÖ Delivered
                    </span>
                  )}
                  {registration.deliveryStatus === 'pending' && (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      ‚è≥ Pending
                    </span>
                  )}
                  {registration.deliveryStatus === 'failed' && (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                      ‚ùå Failed
                    </span>
                  )}
                </div>

                <!-- Delivered Date -->
                <div class="col-span-2">
                  {registration.deliveredAt ? (
                    <div>
                      <div class="text-sm text-gray-900">
                        {new Date(registration.deliveredAt).toLocaleDateString()}
                      </div>
                      <div class="text-xs text-gray-500">
                        {new Date(registration.deliveredAt).toLocaleTimeString()}
                      </div>
                    </div>
                  ) : (
                    <span class="text-sm text-gray-400">‚Äî</span>
                  )}
                </div>

                <!-- Actions -->
                <div class="col-span-1">
                  <div class="flex space-x-2">
                    <button 
                      class="text-teal-600 hover:text-teal-900 text-sm font-medium"
                      onclick={`updateStatus('${registration.id}', 'delivered')`}
                      title="Mark as Delivered"
                    >
                      ‚úÖ
                    </button>
                    <button 
                      class="text-red-600 hover:text-red-900 text-sm font-medium"
                      onclick={`updateStatus('${registration.id}', 'failed')`}
                      title="Mark as Failed"
                    >
                      ‚ùå
                    </button>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- Empty State -->
      {registrationData.registrations.length === 0 && (
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No registrations found</h3>
          <p class="mt-1 text-sm text-gray-500">
            {Object.keys(filters).length > 0 
              ? 'Try adjusting your filters to see more results.'
              : 'Registrations will appear here once people scan your QR codes.'
            }
          </p>
        </div>
      )}
    </div>
  )}

  <!-- Pagination -->
  {registrationData && registrationData.totalPages > 1 && (
    <div class="flex items-center justify-between bg-white px-6 py-3 rounded-lg shadow-sm border border-gray-200 mt-6">
      <div class="flex-1 flex justify-between sm:hidden">
        <!-- Mobile pagination -->
        {registrationData.hasPreviousPage && (
          <a
            href={`?${new URLSearchParams({...Object.fromEntries(url.searchParams), page: (page - 1).toString()}).toString()}`}
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Previous
          </a>
        )}
        {registrationData.hasNextPage && (
          <a
            href={`?${new URLSearchParams({...Object.fromEntries(url.searchParams), page: (page + 1).toString()}).toString()}`}
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Next
          </a>
        )}
      </div>
      
      <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700">
            Showing page <span class="font-medium">{registrationData.currentPage}</span> of{' '}
            <span class="font-medium">{registrationData.totalPages}</span>
          </p>
        </div>
        <div>
          <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            {registrationData.hasPreviousPage && (
              <a
                href={`?${new URLSearchParams({...Object.fromEntries(url.searchParams), page: (page - 1).toString()}).toString()}`}
                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
              >
                <span class="sr-only">Previous</span>
                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
              </a>
            )}
            
            <!-- Page numbers -->
            {Array.from({length: Math.min(5, registrationData.totalPages)}, (_, i) => {
              const pageNum = Math.max(1, Math.min(registrationData.totalPages - 4, page - 2)) + i;
              if (pageNum > registrationData.totalPages) return null;
              
              return (
                <a
                  href={`?${new URLSearchParams({...Object.fromEntries(url.searchParams), page: pageNum.toString()}).toString()}`}
                  class={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                    pageNum === page
                      ? 'z-10 bg-teal-50 border-teal-500 text-teal-600'
                      : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                  }`}
                >
                  {pageNum}
                </a>
              );
            })}
            
            {registrationData.hasNextPage && (
              <a
                href={`?${new URLSearchParams({...Object.fromEntries(url.searchParams), page: (page + 1).toString()}).toString()}`}
                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
              >
                <span class="sr-only">Next</span>
                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </a>
            )}
          </nav>
        </div>
      </div>
    </div>
  )}
</div>

<script>
  // Client-side interactivity for status updates! üéâ
  window.updateStatus = async (registrationId: string, status: 'delivered' | 'failed' | 'pending') => {
    try {
      const response = await fetch('/api/dashboard/update-status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          registrationId,
          status,
        }),
      });

      if (response.ok) {
        // Refresh the page to show updated data
        window.location.reload();
      } else {
        alert('Failed to update status. Please try again.');
      }
    } catch (error) {
      console.error('Error updating status:', error);
      alert('Failed to update status. Please try again.');
    }
  };
</script>

<style>
  .registration-grid-container {
    @apply max-w-7xl mx-auto;
  }
  
  /* Smooth hover animations */
  .hover\\:bg-gray-50:hover {
    transition: background-color 0.15s ease-in-out;
  }
  
  /* Beautiful responsive design */
  @media (max-width: 768px) {
    .grid-cols-12 {
      @apply grid-cols-1 gap-2;
    }
    
    .col-span-1,
    .col-span-2 {
      @apply col-span-1;
    }
  }
</style>