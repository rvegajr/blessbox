---
import type { APIRoute } from 'astro';
import jwt from 'jsonwebtoken';
import { AuthenticationService } from '../../implementations/auth/AuthenticationService';
import { TokenService } from '../../implementations/auth/TokenService';
import { createDatabaseConnection, getDatabase } from '../../database/connection';
import { organizations } from '../../database/schema';
import { eq } from 'drizzle-orm';

const tokenParam = Astro.url.searchParams.get('token') || '';
let redirectUrl = '/dashboard';
let ok = false;
let err: string | null = null;

try {
  if (!tokenParam) throw new Error('Missing token');
  const secret = process.env.JWT_SECRET || 'super-secret-key-change-in-production';
  const payload = jwt.verify(tokenParam, secret, { issuer: 'blessbox', audience: 'blessbox-users' }) as any;
  if (!payload || payload.typ !== 'magic' || !payload.email) throw new Error('Invalid token');

  // Lookup organization by email
  await createDatabaseConnection();
  const db = getDatabase();
  const [organization] = await db
    .select()
    .from(organizations)
    .where(eq(organizations.contactEmail, payload.email))
    .limit(1);
  if (!organization) throw new Error('Account not found');

  // Issue session tokens
  const tokenService = new TokenService();
  const accessToken = tokenService.generateAccessToken({ userId: organization.id, email: organization.contactEmail, organizationId: organization.id });
  const refreshToken = tokenService.generateRefreshToken(organization.id);

  // Set HttpOnly cookies on the response
  const fifteenMinutes = 60 * 15;
  const sevenDays = 60 * 60 * 24 * 7;
  Astro.response.headers.append('Set-Cookie', `bb_access=${accessToken}; HttpOnly; Path=/; Max-Age=${fifteenMinutes}; SameSite=Lax`);
  Astro.response.headers.append('Set-Cookie', `bb_refresh=${refreshToken}; HttpOnly; Path=/; Max-Age=${sevenDays}; SameSite=Lax`);
  ok = true;

  // Try to derive a better redirect if slug is available from sessionStorage on client
} catch (e: any) {
  err = e?.message || 'Invalid or expired link';
}
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Signing you in…</title>
    <meta http-equiv="refresh" content="0; url=/dashboard" />
  </head>
  <body>
    <script>
      try {
        const data = sessionStorage.getItem('onboardingData');
        const slug = data && JSON.parse(data)?.organizationSlug;
        if (slug) {
          location.replace(`/dashboard/organization/${slug}`);
        } else {
          location.replace('/dashboard');
        }
      } catch {
        location.replace('/dashboard');
      }
    </script>
    <noscript>
      Redirecting to dashboard…
    </noscript>
  </body>
  
</html>


