---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Text from '../../components/fundations/elements/Text.astro';
import Button from '../../components/fundations/elements/Button.astro';
import Wrapper from '../../components/fundations/containers/Wrapper.astro';
// Note: These imports are for server-side only
// Client-side imports are handled in the script tag

// Get stored data from previous step
// Note: This will be handled client-side in the script tag
const onboardingData = null;
---

<BaseLayout 
  title="Organization Setup - BlessBox" 
  description="Set up your organization profile for BlessBox QR registration system. Configure your organization details and event information."
  hideNav={true} 
  hideFooter={true}
>
  <Wrapper class="py-16">
    <div class="max-w-2xl mx-auto">
      <!-- Progress Bar -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <Text tag="h2" variant="textXL" class="font-semibold">
            Step 1 of 4: Organization Setup
          </Text>
          <Text tag="span" variant="textSM" class="text-base-500">
            25% Complete
          </Text>
        </div>
        <div class="w-full bg-base-200 rounded-full h-2">
          <div class="bg-teal-500 h-2 rounded-full" style="width: 25%"></div>
        </div>
      </div>

      <!-- Organization Info Display -->
      {onboardingData && (
        <div class="bg-base-50 rounded-xl p-6 mb-8">
          <Text tag="h3" variant="textLG" class="font-medium mb-4">
            Organization Details
          </Text>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Text tag="span" variant="textSM" class="text-base-500">Organization Name</Text>
              <Text tag="p" variant="textBase" class="font-medium">{onboardingData.organizationName}</Text>
            </div>
            <div>
              <Text tag="span" variant="textSM" class="text-base-500">Event Name</Text>
              <Text tag="p" variant="textBase" class="font-medium">{onboardingData.eventName}</Text>
            </div>
            <div class="md:col-span-2">
              <Text tag="span" variant="textSM" class="text-base-500">Custom Domain</Text>
              <Text tag="p" variant="textBase" class="font-medium">blessbox.org/{onboardingData.customDomain}</Text>
            </div>
          </div>
        </div>
      )}

      <!-- Contact Information Form -->
      <div class="bg-white rounded-xl shadow-lg p-8">
        <Text tag="h3" variant="textXL" class="font-semibold mb-6">
          Contact Information
        </Text>
        <Text tag="p" variant="textBase" class="text-base-600 mb-8">
          Please provide your organization's contact details. We'll use this information to verify your account and send important updates.
        </Text>

        <form id="contactForm" class="space-y-6">
          <!-- Email -->
          <div>
            <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
              Contact Email *
            </Text>
            <input 
              type="email" 
              id="contactEmail"
              name="email"
              placeholder="contact@yourorganization.org" 
              class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
              required
            />
            <div id="emailError" class="hidden text-red-500 text-sm mt-1"></div>
          </div>

          <!-- Phone -->
          <div>
            <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
              Contact Phone
            </Text>
            <input 
              type="tel" 
              id="contactPhone"
              name="phone"
              placeholder="(555) 123-4567" 
              class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
            />
            <div id="phoneError" class="hidden text-red-500 text-sm mt-1"></div>
          </div>

          <!-- Address -->
          <div>
            <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
              Street Address
            </Text>
            <input 
              type="text" 
              id="contactAddress"
              name="address"
              placeholder="123 Main Street" 
              class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
            />
            <div id="addressError" class="hidden text-red-500 text-sm mt-1"></div>
          </div>

          <!-- City, State, Zip -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
                City
              </Text>
              <input 
                type="text" 
                id="contactCity"
                name="city"
                placeholder="City" 
                class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
              />
              <div id="cityError" class="hidden text-red-500 text-sm mt-1"></div>
            </div>
            <div>
              <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
                State
              </Text>
              <input 
                type="text" 
                id="contactState"
                name="state"
                placeholder="State" 
                class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
              />
              <div id="stateError" class="hidden text-red-500 text-sm mt-1"></div>
            </div>
            <div>
              <Text tag="label" variant="textSM" class="block text-base-600 mb-2">
                Zip Code
              </Text>
              <input 
                type="text" 
                id="contactZip"
                name="zipCode"
                placeholder="12345" 
                class="w-full p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
              />
              <div id="zipError" class="hidden text-red-500 text-sm mt-1"></div>
            </div>
          </div>

          <!-- Submit Button -->
          <div class="pt-6">
            <Button 
              variant="primary" 
              size="medium" 
              class="w-full disabled:opacity-50 disabled:cursor-not-allowed"
              id="submitButton"
              disabled
            >
              Continue to Email Verification
            </Button>
          </div>
        </form>
      </div>
    </div>
  </Wrapper>

  <script>
    // Simplified validation and storage for demo
    const validationService = {
      validateEmail: (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email),
      validatePhone: (phone) => /^[\d\s\-\(\)\+\.]+$/.test(phone) && phone.replace(/\D/g, '').length >= 10,
      validateZipCode: (zip) => /^\d{5}(-\d{4})?$/.test(zip),
      validateRequired: (value) => value && value.trim().length > 0,
      getErrorMessage: (field, type) => {
        const messages = {
          email: { format: 'Please enter a valid email address' },
          phone: { format: 'Please enter a valid phone number' },
          zipCode: { format: 'Please enter a valid zip code' }
        };
        return messages[field]?.[type] || `${field} is required`;
      }
    };

    const storage = {
      save: (key, data) => sessionStorage.setItem(key, JSON.stringify(data)),
      get: (key) => {
        const item = sessionStorage.getItem(key);
        return item ? JSON.parse(item) : null;
      }
    };

    const StorageKeys = {
      ONBOARDING_DATA: 'blessbox_onboarding_data'
    };

    // Initialize form elements
    const form = document.getElementById('contactForm');
    const submitButton = document.getElementById('submitButton');

    // Form validation
    function validateForm() {
      const email = document.getElementById('contactEmail').value;

      // Only email is required
      const isValid = validationService.validateEmail(email);

      submitButton.disabled = !isValid;
      return isValid;
    }

    // Real-time validation
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('input', validateForm);
      input.addEventListener('blur', () => {
        const fieldName = input.name;
        const value = input.value;
        const errorElement = document.getElementById(`${fieldName}Error`);
        
        let isValid = true;
        let errorMessage = '';

        // Only validate format if field has content (except email which is required)
        if (value.trim()) {
          switch (fieldName) {
            case 'email':
              isValid = validationService.validateEmail(value);
              errorMessage = validationService.getErrorMessage('email', 'format');
              break;
            case 'phone':
              isValid = validationService.validatePhone(value);
              errorMessage = validationService.getErrorMessage('phone', 'format');
              break;
            case 'zipCode':
              isValid = validationService.validateZipCode(value);
              errorMessage = validationService.getErrorMessage('zipCode', 'format');
              break;
          }
        } else if (fieldName === 'email') {
          // Email is required
          isValid = false;
          errorMessage = validationService.getErrorMessage('email', 'required');
        }

        if (!isValid && (value.trim() || fieldName === 'email')) {
          errorElement.textContent = errorMessage;
          errorElement.classList.remove('hidden');
        } else {
          errorElement.classList.add('hidden');
        }
      });
    });

                // Form submission
            form.addEventListener('submit', async (e) => {
              e.preventDefault();
              
              if (!validateForm()) return;

              const formData = new FormData(form);
              const contactInfo = {
                email: formData.get('email'),
                phone: formData.get('phone'),
                address: formData.get('address'),
                city: formData.get('city'),
                state: formData.get('state'),
                zipCode: formData.get('zipCode')
              };

              // Show loading state
              submitButton.disabled = true;
              submitButton.textContent = 'Sending Verification Email...';

              try {
                // Get organization name from previous step
                const currentData = storage.get(StorageKeys.ONBOARDING_DATA) || {};
                
                // Send verification email
                const response = await fetch('/api/onboarding/send-verification', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    email: contactInfo.email,
                    organizationName: currentData.organizationName
                  })
                });

                const result = await response.json();

                if (!result.success) {
                  throw new Error(result.error || 'Failed to send verification email');
                }

                // Save contact info to storage
                storage.save(StorageKeys.ONBOARDING_DATA, {
                  ...currentData,
                  ...contactInfo
                });

                // Success! Redirect to email verification
                window.location.href = '/onboarding/verify-email';

              } catch (error) {
                console.error('Failed to send verification email:', error);
                
                // Show error message
                const errorDiv = document.createElement('div');
                errorDiv.className = 'bg-red-50 border border-red-200 rounded-lg p-4 mt-4';
                errorDiv.innerHTML = `
                  <div class="flex items-center">
                    <div class="text-red-600 font-medium">
                      Failed to send verification email
                    </div>
                  </div>
                  <div class="text-red-600 text-sm mt-1">
                    ${error.message || 'Please check your email address and try again.'}
                  </div>
                `;
                
                form.appendChild(errorDiv);
                
                // Reset button
                submitButton.disabled = false;
                submitButton.textContent = 'Continue to Email Verification';
                
                // Remove error after 5 seconds
                setTimeout(() => {
                  if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                  }
                }, 5000);
              }
            });

    // Initial validation
    validateForm();
  </script>
</BaseLayout> 