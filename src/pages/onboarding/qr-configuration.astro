---
import BaseLayout from '@/layouts/BaseLayout.astro';
import Text from '@/components/fundations/elements/Text.astro';
import Button from '@/components/fundations/elements/Button.astro';
import Wrapper from '@/components/fundations/containers/Wrapper.astro';
// Note: These imports are for server-side only
// Client-side imports are handled in the script tag

// Get stored data
// Note: This will be handled client-side in the script tag
const onboardingData = null;
---

<BaseLayout title="QR Configuration - BlessBox" hideNav={true} hideFooter={true}>
  <Wrapper class="py-16">
    <div class="max-w-4xl mx-auto">
      <!-- Progress Bar -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <Text tag="h2" variant="textXL" class="font-semibold">
            Step 4 of 4: QR Code Setup
          </Text>
          <Text tag="span" variant="textSM" class="text-base-500">
            100% Complete
          </Text>
        </div>
        <div class="w-full bg-base-200 rounded-full h-2">
          <div class="bg-teal-500 h-2 rounded-full" style="width: 100%"></div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- QR Configuration Panel -->
        <div class="bg-white rounded-xl shadow-lg p-8">
          <Text tag="h3" variant="textXL" class="font-semibold mb-6">
            Configure Your QR Codes
          </Text>
          <Text tag="p" variant="textBase" class="text-base-600 mb-8">
            Set up QR codes for different locations or entry points. Each QR code will lead to the same registration form.
          </Text>

          <!-- QR Code Quantity -->
          <div class="mb-8">
            <Text tag="h4" variant="textLG" class="font-medium mb-4">
              How many QR codes do you need?
            </Text>
            <div class="space-y-3">
              <label class="flex items-center p-3 border border-base-200 rounded-lg hover:bg-base-50 cursor-pointer">
                <input type="radio" name="qrQuantity" value="1" checked class="mr-3">
                <div>
                  <Text tag="span" variant="textBase" class="font-medium">Single QR Code</Text>
                  <Text tag="p" variant="textSM" class="text-base-500">One QR code for all locations</Text>
                </div>
              </label>
              <label class="flex items-center p-3 border border-base-200 rounded-lg hover:bg-base-50 cursor-pointer">
                <input type="radio" name="qrQuantity" value="multiple" class="mr-3">
                <div>
                  <Text tag="span" variant="textBase" class="font-medium">Multiple QR Codes</Text>
                  <Text tag="p" variant="textSM" class="text-base-500">Different QR codes for different locations</Text>
                </div>
              </label>
            </div>
          </div>

          <!-- QR Code Labels with Multi-Entry Support -->
          <div id="qrLabels" class="mb-8 hidden">
            <Text tag="h4" variant="textLG" class="font-medium mb-4">
              ðŸŽ¯ QR Code Labels & Entry Points
            </Text>
            <Text tag="p" variant="textSM" class="text-base-500 mb-6">
              Create QR codes for different locations and specify multiple entry points (doors, lanes, etc.)
            </Text>
            
            <div id="labelsList" class="space-y-6">
              <div class="qr-label-group border border-base-200 rounded-xl p-6 bg-base-50/50">
                <div class="flex items-center space-x-3 mb-4">
                  <input 
                    type="text" 
                    placeholder="e.g., Main Building" 
                    class="flex-1 p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20 font-semibold"
                    data-label="1"
                  >
                  <button type="button" onclick="removeLabel(this)" class="text-red-500 hover:text-red-700 p-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <!-- Entry Points Section -->
                <div class="entry-points-section">
                  <div class="flex items-center justify-between mb-3">
                    <Text tag="span" variant="textSM" class="font-medium text-base-700">
                      ðŸšª Entry Points (Optional)
                    </Text>
                    <button type="button" onclick="addEntryPoint(this)" class="text-teal-600 hover:text-teal-700 text-sm flex items-center space-x-1">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                      </svg>
                      <span>Add Entry Point</span>
                    </button>
                  </div>
                  
                  <div class="entry-points space-y-2">
                    <div class="flex items-center space-x-2">
                      <input 
                        type="text" 
                        placeholder="e.g., Door A, Lane 1, West Entrance" 
                        class="flex-1 p-2 text-sm border border-base-300 rounded-lg focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
                      >
                      <button type="button" onclick="removeEntryPoint(this)" class="text-red-400 hover:text-red-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  <Text tag="p" variant="textXS" class="text-base-500 mt-2">
                    ðŸ’¡ Entry points help track which specific door or lane was used for registration
                  </Text>
                </div>
              </div>
            </div>
            
            <button type="button" onclick="addLabel()" class="text-teal-600 hover:text-teal-700 font-medium mt-4 flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
              <span>Add Another QR Code</span>
            </button>
          </div>



          <!-- Complete Setup Button -->
          <Button 
            variant="primary" 
            size="medium" 
            class="w-full"
            id="completeButton"
            onclick="completeSetup()"
          >
            Complete Setup
          </Button>
        </div>

        <!-- Preview Panel -->
        <div class="bg-white rounded-xl shadow-lg p-8">
          <Text tag="h3" variant="textXL" class="font-semibold mb-6">
            QR Code Preview
          </Text>
          <Text tag="p" variant="textBase" class="text-base-600 mb-8">
            Your QR codes will look like this:
          </Text>

          <div id="qrPreview" class="space-y-4">
            <!-- QR previews will be populated by JavaScript -->
          </div>

          <!-- Success Message -->
          <div id="successMessage" class="hidden mt-8 p-4 bg-green-50 border border-green-200 rounded-lg">
            <div class="flex items-center space-x-3">
              <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <div>
                <Text tag="h4" variant="textLG" class="font-medium text-green-800">
                  Setup Complete!
                </Text>
                <Text tag="p" variant="textSM" class="text-green-600">
                  Your BlessBox account is ready. You can now generate and download your QR codes.
                </Text>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Wrapper>

  <script>
    import { SessionStorageService } from '../../implementations/services/SessionStorageService';
    import { StorageKeys } from '../../interfaces/services/IStorageService';

    // Initialize services
    const storage = new SessionStorageService();
    const qrLabels = document.getElementById('qrLabels') as HTMLElement;
    const labelsList = document.getElementById('labelsList') as HTMLElement;
    const qrPreview = document.getElementById('qrPreview') as HTMLElement;
    const successMessage = document.getElementById('successMessage') as HTMLElement;

    let labelCounter = 2;

    // Handle QR quantity selection
    document.querySelectorAll('input[name="qrQuantity"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.value === 'multiple') {
          qrLabels.classList.remove('hidden');
          updateQRPreview();
        } else {
          qrLabels.classList.add('hidden');
          updateQRPreview();
        }
      });
    });

    // Add new QR label group with entry points
    (window as any).addLabel = () => {
      const labelDiv = document.createElement('div');
      labelDiv.className = 'qr-label-group border border-base-200 rounded-xl p-6 bg-base-50/50';
      labelDiv.innerHTML = `
        <div class="flex items-center space-x-3 mb-4">
          <input 
            type="text" 
            placeholder="e.g., Building ${labelCounter}" 
            class="flex-1 p-3 border border-base-300 rounded-xl focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20 font-semibold"
            data-label="${labelCounter}"
          >
          <button type="button" onclick="removeLabel(this)" class="text-red-500 hover:text-red-700 p-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="entry-points-section">
          <div class="flex items-center justify-between mb-3">
            <span class="text-sm font-medium text-base-700">ðŸšª Entry Points (Optional)</span>
            <button type="button" onclick="addEntryPoint(this)" class="text-teal-600 hover:text-teal-700 text-sm flex items-center space-x-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
              <span>Add Entry Point</span>
            </button>
          </div>
          
          <div class="entry-points space-y-2">
            <div class="flex items-center space-x-2">
              <input 
                type="text" 
                placeholder="e.g., Door A, Lane 1, West Entrance" 
                class="flex-1 p-2 text-sm border border-base-300 rounded-lg focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
              >
              <button type="button" onclick="removeEntryPoint(this)" class="text-red-400 hover:text-red-600">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <p class="text-xs text-base-500 mt-2">ðŸ’¡ Entry points help track which specific door or lane was used for registration</p>
        </div>
      `;
      labelsList.appendChild(labelDiv);
      labelCounter++;
      updateQRPreview();
    };

    // Remove label
    (window as any).removeLabel = (button: HTMLButtonElement) => {
      if (labelsList.children.length > 1) {
        button.closest('.qr-label-group')?.remove();
        updateQRPreview();
      }
    };

    // Add entry point to a QR label group
    (window as any).addEntryPoint = (button: HTMLButtonElement) => {
      const entryPointsContainer = button.closest('.entry-points-section')?.querySelector('.entry-points');
      if (entryPointsContainer) {
        const entryDiv = document.createElement('div');
        entryDiv.className = 'flex items-center space-x-2';
        entryDiv.innerHTML = `
          <input 
            type="text" 
            placeholder="e.g., Door A, Lane 1, West Entrance" 
            class="flex-1 p-2 text-sm border border-base-300 rounded-lg focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
          >
          <button type="button" onclick="removeEntryPoint(this)" class="text-red-400 hover:text-red-600">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        `;
        entryPointsContainer.appendChild(entryDiv);
        updateQRPreview();
      }
    };

    // Remove entry point
    (window as any).removeEntryPoint = (button: HTMLButtonElement) => {
      const entryPointsContainer = button.closest('.entry-points');
      if (entryPointsContainer && entryPointsContainer.children.length > 1) {
        button.closest('.flex')?.remove();
        updateQRPreview();
      }
    };

    // Update QR preview
    async function updateQRPreview() {
      const isMultiple = (document.querySelector('input[name="qrQuantity"]:checked') as HTMLInputElement)?.value === 'multiple';

      qrPreview.innerHTML = '<div class="text-center text-base-500">Generating QR codes...</div>';

      try {
        // Prepare QR code data
        let qrData = [];
        
        if (isMultiple) {
          // ðŸŽ¯ Get all QR label groups with their entry points
          const labelGroups = Array.from(labelsList.querySelectorAll('.qr-label-group'));
          qrData = labelGroups.map(group => {
            const labelInput = group.querySelector('input[data-label]') as HTMLInputElement;
            const label = labelInput?.value || labelInput?.placeholder || 'Unnamed QR Code';
            
            // ðŸšª Get all entry points for this QR code
            const entryPointInputs = Array.from(group.querySelectorAll('.entry-points input')) as HTMLInputElement[];
            const entryPoints = entryPointInputs
              .map(input => input.value?.trim())
              .filter(value => value && value.length > 0);
            
            return { 
              label, 
              entryPoints: entryPoints.length > 0 ? entryPoints : undefined 
            };
          });
        } else {
          qrData = [{ label: 'Main QR Code', entryPoints: undefined }];
        }

        // Get organization data from storage
        const currentData = storage.get(StorageKeys.ONBOARDING_DATA) || {};

        // Generate QR codes
        const response = await fetch('/api/onboarding/generate-qr', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            qrCodes: qrData,
            organizationData: currentData
          })
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Failed to generate QR codes');
        }

        // Display generated QR codes
        qrPreview.innerHTML = '';
        
        result.qrCodes.forEach((qrCode: any, index: number) => {
          const qrElement = document.createElement('div');
          qrElement.className = 'border border-base-200 rounded-lg p-6 text-center bg-white';
          
          // ðŸšª Build entry points display
          const originalQRData = qrData[index];
          const entryPointsHtml = originalQRData?.entryPoints && originalQRData.entryPoints.length > 0 
            ? `
              <div class="mt-3 p-3 bg-blue-50 rounded-lg">
                <p class="text-xs font-medium text-blue-700 mb-2">ðŸšª Entry Points:</p>
                <div class="flex flex-wrap gap-1 justify-center">
                  ${originalQRData.entryPoints.map(entry => 
                    `<span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">${entry}</span>`
                  ).join('')}
                </div>
              </div>
            ` : '';
          
          qrElement.innerHTML = `
            <div class="w-32 h-32 mx-auto mb-3 border border-base-200 rounded-lg overflow-hidden bg-white">
              <img src="${qrCode.dataUrl}" alt="QR Code for ${qrCode.label}" class="w-full h-full object-contain">
            </div>
            <p class="font-semibold text-base text-gray-800">${qrCode.label}</p>
            <p class="text-xs text-base-500 mt-1 break-all font-mono bg-gray-50 px-2 py-1 rounded">${qrCode.url}</p>
            ${entryPointsHtml}
          `;
          qrPreview.appendChild(qrElement);
        });

      } catch (error) {
        console.error('Failed to generate QR preview:', error);
        qrPreview.innerHTML = `
          <div class="text-center text-red-500">
            <p>Failed to generate QR codes</p>
            <p class="text-sm">${error.message}</p>
          </div>
        `;
      }
    }

    // Complete setup
    (window as any).completeSetup = async () => {
      const isMultiple = (document.querySelector('input[name="qrQuantity"]:checked') as HTMLInputElement)?.value === 'multiple';
      
      const completeButton = document.querySelector('button[onclick="completeSetup()"]') as HTMLButtonElement;
      const originalText = completeButton?.textContent || 'Complete Setup';
      
      try {
        // Show loading state
        if (completeButton) {
          completeButton.disabled = true;
          completeButton.textContent = 'Generating QR Codes...';
        }
        
        // Prepare QR code data
        let qrData = [];
        
        if (isMultiple) {
          const labels = Array.from(labelsList.querySelectorAll('input')).map(input => input.value || input.placeholder);
          qrData = labels.map(label => ({ label }));
        } else {
          qrData = [{ label: 'Main QR Code' }];
        }

        // Get organization data from storage
        const currentData = storage.get(StorageKeys.ONBOARDING_DATA) || {};

        // Generate final QR codes
        const response = await fetch('/api/onboarding/generate-qr', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            qrCodes: qrData,
            organizationData: currentData
          })
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Failed to generate QR codes');
        }

        // Save complete onboarding data
        storage.save(StorageKeys.ONBOARDING_DATA, {
          ...currentData,
          qrCodes: result.qrCodes,
          onboardingComplete: true,
          completedAt: new Date().toISOString()
        });

        // Also save QR configuration for compatibility
        storage.save(StorageKeys.QR_CONFIG, {
          qrCodes: result.qrCodes
        });

        // Show success message
        if (completeButton) {
          completeButton.textContent = 'âœ… Complete!';
        }
        successMessage.classList.remove('hidden');
        
        setTimeout(() => {
          successMessage.scrollIntoView({ behavior: 'smooth' });
          
          // Show detailed success info
          setTimeout(() => {
            alert(`ðŸŽ‰ Onboarding completed successfully!\n\nGenerated ${result.qrCodes.length} QR code(s) for ${currentData.organizationName || 'your organization'}.\n\nYour registration system is now ready!`);
            
            // In a real app, redirect to dashboard
            console.log('Onboarding complete! Data:', storage.get(StorageKeys.ONBOARDING_DATA));
            
            // For demo, redirect back to home
            window.location.href = '/';
          }, 2000);
        }, 100);

      } catch (error) {
        console.error('Failed to complete setup:', error);
        
        // Show error
        if (completeButton) {
          completeButton.disabled = false;
          completeButton.textContent = originalText;
        }
        
        alert(`Failed to complete setup: ${error.message}\n\nPlease try again.`);
      }
    };

    // Update preview when language changes
    document.getElementById('formLanguage')?.addEventListener('change', updateQRPreview);

    // Initial preview
    updateQRPreview();
  </script>
</BaseLayout> 