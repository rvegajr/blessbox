// üéâ JOYFUL TURSO SCHEMA UPDATE - Adding passwordless magic! ‚ú®
import { createClient } from '@libsql/client';

// üöÄ Set up our AMAZING Turso connection!
process.env.TURSO_DATABASE_URL = 'libsql://blessbox-local-rvegajr.aws-us-east-2.turso.io';
// Use environment variable for auth token (set in environment)
process.env.TURSO_AUTH_TOKEN = process.env.TURSO_AUTH_TOKEN || 'test-token-placeholder';

console.log('üéä Updating Turso schema with PASSWORDLESS MAGIC! ‚ú®');

const client = createClient({
  url: process.env.TURSO_DATABASE_URL,
  authToken: process.env.TURSO_AUTH_TOKEN,
});

try {
  // üîê Add passwordHash column (nullable for passwordless!)
  console.log('üåü Adding passwordHash column...');
  await client.execute(`
    ALTER TABLE organizations 
    ADD COLUMN password_hash TEXT;
  `);

  // ‚è∞ Add lastLoginAt column
  console.log('‚è∞ Adding lastLoginAt column...');
  await client.execute(`
    ALTER TABLE organizations 
    ADD COLUMN last_login_at TEXT;
  `);

  // ‚ú® Create login_codes table for passwordless magic!
  console.log('üöÄ Creating login_codes table...');
  await client.execute(`
    CREATE TABLE IF NOT EXISTS login_codes (
      id TEXT PRIMARY KEY,
      email TEXT NOT NULL,
      code TEXT NOT NULL,
      attempts INTEGER DEFAULT 0 NOT NULL,
      created_at TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL,
      expires_at TEXT NOT NULL,
      verified INTEGER DEFAULT 0 NOT NULL
    )
  `);

  // üéØ Create indexes for LIGHTNING FAST queries!
  console.log('‚ö° Creating indexes...');
  await client.execute('CREATE INDEX IF NOT EXISTS login_codes_email_idx ON login_codes(email)');
  await client.execute('CREATE INDEX IF NOT EXISTS login_codes_expires_at_idx ON login_codes(expires_at)');

  console.log('üéâ SCHEMA UPDATE COMPLETE! Passwordless magic is READY! ‚ú®');
  
  client.close();
} catch (error) {
  console.error('üíî Schema update failed:', error);
  process.exit(1);
}